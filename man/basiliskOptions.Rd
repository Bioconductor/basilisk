% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/options.R
\name{getBasiliskFork}
\alias{getBasiliskFork}
\alias{setBasiliskFork}
\alias{getBasiliskGlobal}
\alias{setBasiliskGlobal}
\title{Options for \pkg{basilisk}}
\usage{
getBasiliskFork()

setBasiliskFork(value)

getBasiliskGlobal()

setBasiliskGlobal(value)
}
\arguments{
\item{value}{Logical scalar indicating whether forking should be used when available (for \code{setBasiliskFork})
or whether the function is permitted to set the global Python instance in the R session (for \code{setBasiliskGlobal}).}
}
\value{
\code{getBasiliskFork} and \code{getBasiliskGlobal} return a logcal scalar indicating whether forking should be used 
or whether a global Python instance can be set, respectively.
}
\description{
Options controlling the efficiency and friendliness of starting up a Python instance via \pkg{basilisk}.
}
\details{
By default, \code{\link{basiliskStart}} will attempt to load a Python instance into the R session.
This avoids the overhead of setting up a new process but will potentially break any \pkg{reticulate}-dependent code outside of \pkg{basilisk}.
To guarantee that \pkg{basilisk} does not break non-\pkg{basilisk} code, users can set \code{setBasiliskGlobal(FALSE)}.
This will never load the Python instance into the current session, instead it will always create a new process to perform this loading.

If a new process must be generated by \code{\link{basiliskStart}}, forking is used by default.
This is generally more efficient than socket communication when it is available (i.e., not on Windows),
but can be less efficient if any garbage collection occurs inside the new process.
In such cases, users or developers may wish to turn off forking with \code{setBasiliskFork(FALSE)},
e.g., in functions where many R-based memory allocations are performed inside \code{\link{basiliskRun}}.
}
\examples{
getBasiliskFork()
getBasiliskGlobal()

}
\seealso{
\code{\link{basiliskStart}}, where these options are used.
}
\author{
Aaron Lun
}
