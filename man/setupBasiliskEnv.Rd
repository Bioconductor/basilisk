% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/setupBasiliskEnv.R
\name{setupBasiliskEnv}
\alias{setupBasiliskEnv}
\title{Set up a \pkg{basilisk} environments}
\usage{
setupBasiliskEnv(envname, packages, pkgname = NULL, conda = FALSE)
}
\arguments{
\item{envname}{String containing the name of the environment to create.}

\item{packages}{Character vector containing the names of Python packages to install into the environment.
It is required to include version numbers in each string.}

\item{pkgname}{String specifying the name of the R package that owns the environment.}

\item{conda}{Logical scalar indicating whether a conda environment should be created.}
}
\value{
A virtual or conda environment is created in the installation directory of \code{pkgname} if specified.
Otherwise, it creates the environment in the directory specified by the environment variable \code{BASILISK_NONPKG_DIR}, 
defaulting to the current working directory. 
The function itself returns a \code{NULL} value invisibly.
}
\description{
Set up a Python virtual or conda environment (depending on the operating system)
for isolated execution of Python code with appropriate versions of all Python packages.
}
\details{
Use of \pkg{basilisk} environments is the recommended approach for Bioconductor packages to interact with the \pkg{basilisk} Python instance.
This avoids version conflicts within an R session when different Bioconductor packages (or even different functions within a single package) require incompatible versions of Python packages.

Developers of Bioconductor packages should call \code{setupBasiliskEnv} with an appropriate \code{pkgname} in an \code{.onLoad} function.
This will create the \pkg{basilisk} environment and install the relevant Python packages upon R package installation.
The \pkg{son.of.basilisk} example in the \code{inst} directory of \pkg{basilisk} can be used as an example.

If all of the requested packages fall into the \dQuote{core} list of packages (see \code{?\link{listCorePackages}}),
a link is created to a common environment in the \pkg{basilisk} installation directory.
This enables multiple client packages to use the same environment for greater efficiency with \code{\link{basiliskStart}}.

If \code{pkgname} is specified and the \pkg{basilisk} environment is already present with all requested packages, \code{setupBasiliskEnv} is a no-op.
This ensures that the function only installs the packages once at the first load during R package installation.

We call these \pkg{basilisk} environments as the function will automatically switch between virtual and conda environments depending on the operating system.
MacOSX and Linux default to virtual environments to enable re-use of dependencies from the core installation, while Windows can only conda environments.
Developers can force the former to conda environments with \code{conda=TRUE}.
}
\section{Dealing with versioning}{
 
Pinned version numbers must be present for all requested packages in \code{packages}.
This improved predictability makes debugging much easier when the R package is installed and executed on different systems.
Explicit versions are also mandatory for all dependencies of requested packages,
which is again necessary to ensure that the same versions are deployed across systems.

The only exception to the above rule is for \dQuote{core} packages that are installed into the \pkg{basilisk} Python instance.
Such core packages do not need be listed with explicit version numbers in \code{packages} (or at all, for that matter).
You can also request a core package without specifying the version, which will automatically be pinned for you.
A full list of core packages with pinned versions is provided at \code{\link{listCorePackages}}.

The exception to the exception occurs when your requested packages are not compatible with the pinned versions of the core packages.
In such cases, the compatible versions of the core packages must again be explicitly listed in \code{packages}.
}

\examples{
##################################################
# Creating virtualenvs in a temporary directory to 
# avoid polluting the user's WORKON_HOME.
tmploc <- file.path(tempdir(), "basilisk")
dir.create(tmploc)
old <- Sys.getenv("WORKON_HOME")
Sys.setenv(WORKON_HOME=tmploc)
##################################################

setupBasiliskEnv('my_package_A', c('pandas==0.25.3',
    "python-dateutil==2.8.1", "pytz==2019.3"))
useBasiliskEnv("my_package_A")
X <- reticulate::import("pandas")
X$`__version__`

# No need to list versions of core packages, 
# or to list them at all if they are dependencies.
setupBasiliskEnv('my_package_A_alt', 'pandas')

##################################################
# Restoring the old WORKON_HOME.
Sys.setenv(WORKON_HOME=old)
##################################################
}
\seealso{
\code{\link{listCorePackages}}, for a list of core Python packages with pinned versions.
}
