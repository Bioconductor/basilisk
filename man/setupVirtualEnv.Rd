% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/setupVirtualEnv.R
\name{setupVirtualEnv}
\alias{setupVirtualEnv}
\title{Set up and use virtual environments}
\usage{
setupVirtualEnv(envname, packages, pkgname = NULL)
}
\arguments{
\item{envname}{String containing the name of the virtual environment to create (for \code{setupVirtualEnv}) or use (other functions).}

\item{packages}{Character vector containing the names of Python packages to install into the virtual environment.
It is required to include version numbers in each string.}

\item{pkgname}{String specifying the name of the R package that owns the virtual environment.}
}
\value{
A virtual environment is created in the installation directory of \code{pkgname} if specified, 
or at the default location for virtual environments otherwise (see \code{?\link{virtualenv_root}}).
The function returns a \code{NULL} value, invisibly.
}
\description{
Set up and use Python virtual environments for isolated execution of Python code with appropriate versions of all Python packages.
}
\details{
Use of virtual environments is the recommended approach for Bioconductor packages to interact with the \pkg{basilisk} Python instance.
This avoids version conflicts within an R session when different Bioconductor packages (or even different functions within a single package) require incompatible versions of Python packages.

Developers of Bioconductor packages should call \code{setupVirtualEnv} with an appropriate \code{pkgname} in an \code{.onLoad} function.
This will create the virtual environment and install the relevant Python packages upon R package installation.
The \pkg{son.of.basilisk} example in the \code{inst} directory of \pkg{basilisk} can be used as an example.

If all of the requested packages fall into the \dQuote{core} list of packages (see \code{?\link{listCorePackages}}),
a link is created to a common virtual environment in the \pkg{basilisk} installation directory.
This enables multiple client packages to use the same virtual environment for greater efficiency with \code{\link{basiliskStart}}.

If \code{pkgname} is specified and the virtual environment is already present with all requested packages, \code{setupVirtualEnv} is a no-op.
This ensures that the function only installs the packages once at the first load during R package installation.
}
\section{Dealing with versioning}{
 
Pinned version numbers must be present for all requested packages in \code{packages}.
This improved predictability makes debugging much easier when the R package is installed and executed on different systems.
Explicit versions are also mandatory for all dependencies of requested packages,
which is again necessary to ensure that the same versions are deployed across systems.

The only exception to the above rule is for \dQuote{core} packages that are installed into the \pkg{basilisk} Python instance.
Such core packages do not need be listed with explicit version numbers in \code{packages} (or at all, for that matter).
You can also request a core package without specifying the version, which will automatically be pinned for you.
A full list of core packages with pinned versions is provided at \code{\link{listCorePackages}}.

The exception to the exception occurs when your requested packages are not compatible with the pinned versions of the core packages.
In such cases, the compatible versions of the core packages must again be explicitly listed in \code{packages}.
}

\examples{
setupVirtualEnv('my_package_A', c('pandas==0.25.3',
    "python-dateutil==2.8.1", "pytz==2019.3"))
useVirtualEnv("my_package_A")
X <- reticulate::import("pandas")
X$`__version__`

# No need to list versions of core packages, 
# or to list them at all if they are dependencies.
setupVirtualEnv('my_package_A_alt', 'pandas')

}
\seealso{
\code{\link{listCorePackages}}, for a list of core Python packages with pinned versions.
}
